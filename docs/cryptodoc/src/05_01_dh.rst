.. _pubkey/dh:

Diffie-Hellman
==============

.. _pubkey/dh/param_gen:

Parameter Generation
--------------------

Diffie-Hellman based algorithms require both parties to agree on a finite
multiplicative cyclic group (**Z**/*p*\ **Z**)* where ``p`` is a prime, and a generator ``g`` of the
group or a subgroup. These parameters are called DH
parameters and are typically precomputed as their generation is
very resource-intensive. Botan implements a generic discrete logarithm
group class in :srcref:`src/lib/pubkey/dl_group/dl_group.cpp`. The class
``DL_Group`` offers the constructor ``DL_Group(RandomNumberGenerator&
rng, PrimeType type, size_t pbits, size_t qbits = 0)`` which can be used
to generate DH parameters. Alternatively, Botan offers several
precomputed Internet Engineering Task Force (IETF) standardized as well as some
domain-specific discrete logarithm groups via the
constructor ``DL_Group::DL_Group(const std::string& name)``.
The constructor generating a ``DL_Group`` operates as follows:

.. admonition:: DL_Group()

   **Input:**

   -  ``rng``: random number generator
   -  ``type``: defines characteristics of the prime ``p`` and the generation
      process (Options: Strong, Prime_Subgroup or DSA_Kosherizer; see below for details)
   -  ``pbits``: bit length of the prime ``p``
   -  ``qbits``: bit length of the prime ``q``, where ``q`` is the order of the subgroup
      (for ``type=Strong`` this must be either omitted or set to ``p-1``)

   **Output:**

   -  DL_Group (**Z**/*p*\ **Z**)\* and a generator ``g`` of the subgroup of
      order ``q``

   In any case, the algorithm initially ensures that the passed value ``pbits``
   is larger than 1023. Otherwise the generation process is
   terminated. Thus, only groups corresponding to a prime longer than 1023 bits can be
   generated with Botan.

   If the function is called with ``type=Strong`` a :ref:`safe prime<prim/random_safe_prime>` is used.
   This means that ``p`` is of the form :math:`p=2*q + 1`` for some prime ``q``,
   and the algorithm performs the following steps:

   **Steps:**

   1. Ensure that ``qbits`` is either 0 or ``pbits-1``.
   2. Sample a random safe prime ``p`` of length ``pbits`` using ``rng`` with the
      function ``random_safe_prime()``.
   3. Set generator ``g`` to 2. Since ``p`` is a safe prime, the order ``(p-1)``
      of (**Z**/*p*\ **Z**)\* has the prime factors :math:`q=\frac{p-1}{2}` and 2. Thus the
      selected generator has an order of ``q`` or :math:`2*q=p-1`. Note that the passed
      parameter ``qbits`` is irrelevant in this case as the length of ``q`` is
      always ``pbits-1``.
   4. Verify that the selected generator ``g`` is a quadratic residue modulo
      ``p`` and subsequently has order ``q``. That is the case if it is true that
      :math:`(\frac{g}{p})=g^{\frac{p-1}{2}}\bmod p=g^{q}\bmod p=1`
      where :math:`(\frac{g}{p})` is the Legendre symbol.
      Otherwise, the next prime from the first 6541 precomputed primes :math:`q_{i}`
      is selected as a candidate for the generator ``g``
      and the algorithm repeats Step 4.

   If the function is called with ``type=Prime_Subgroup``, the algorithm
   operates differently and without the need of a safe prime.

   **Steps:**

   1. If a ``qbits`` value of 0 is passed,
      the algorithm first finds a suitable value for the bit length of ``q``.
      This is done by redefining ``qbits`` according to the estimated difficulty
      of the discrete logarithm problem
      :math:`2*\log_{2} (e^{1.92*\sqrt[3]{ \ln{(2^{qbits})} * \ln{(\ln{(2^{qbits})})^{2}} }} *k)`
      found by calling ``dl_exponent_size()`` from
      :srcref:`src/lib/pubkey/workfactor.cpp`.
      Instead of calculating the estimate, the function uses the following predefined buckets:

      - :math:`pbits = 0`: this can not occur as :math:`pbits \geq 1024` is required
      - :math:`0 < pbits \leq 256`: this can not occur as :math:`pbits \geq 1024` is required
      - :math:`256 < pbits \leq 1024`: 192
      - :math:`1024 < pbits \leq 1536`: 224
      - :math:`1536 < pbits \leq 2048`: 256
      - :math:`2048 < pbits \leq 4096`: 384
      - :math:`pbits > 4096``: 512

      Hence the algorithm ensures the recommended bit length of ``q`` given in [RFC3766]_ is never subseeded
      (except for very large keys, see buckets above).
      Furthermore, it ensures that the length of ``q`` is at least 192 bits even when a small ``pbits`` value is
      passed.
   2. Sample the prime ``q`` of length ``qbits`` from the passed ``rng`` by
      calling ``random_prime()``.
   3. Sample ``X`` with length ``pbits`` from ``rng`` and set the highest bit.
   4. Calculate candidate ``p`` as :math:`X - (X \bmod (2*q)) + 1`. Thus ``q`` is a factor of :math:`p-1`.
   5. Verify if candidate ``p`` has length ``pbits``. Otherwise, return to Step 3 to generate a new candidate ``p``.
   6. Perform a primality test of ``p`` with the function ``is_prime()`` for
      random numbers and probability set to 128 (i.e. the chance of false positives is bounded by :math:`\frac{1}{2^{128}}`).
      If ``p`` fails the test,
      repeat from Step 3.
   7. Compute generator ``g`` of the subgroup with order ``q`` using the function ``make_dsa_generator()``.
      After receiving ``p`` and the subgroup order ``q``, ``g`` is computed as follows:

      1. Verify that :math:`p-1>q` holds. If not, the algorithm terminates with
         an invalid argument error.
      2. Verify that ``q`` is a factor of :math:`p-1`. If not, algorithm terminates
         with an invalid argument error.
      3. Iterate over the first 6541 precomputed primes :math:`q_{i}` (without 2) and
         compute ``g`` as :math:`q_i^{\frac{p-1}{q}} \bmod p`.
         If ``g`` is 1, choose the next prime :math:`q_{i}` and
         repeat the process. Once all available primes :math:`q_{i}` have been used and
         no suitable generator is found, the function terminates with an
         error.

   The function call with ``type=DSA_Kosherizer`` generates the primes
   ``p`` and ``q`` using one of the SHA-1 or SHA-2 hash functions. The implementation follows
   the algorithm described in Section A.1.1.2 in [FIPS-186-4]_ and operates
   as follows:

   **Steps:**

   1. If a ``qbits`` value of 0 is passed,
      fix a new bit length for ``q``:
      Assign ``qbits`` to 160 if :math:`pbits \leq 1024`, otherwise set ``qbits`` to 256.
   2. Sample a random ``seed`` of length :math:`\frac{qbits}{8}` bytes from the passed random number
      generator.
   3. Check if the sizes ``qbits`` and ``pbits`` are allowed by [FIPS-186-4]_.
      Only the length combinations listed below are valid. If another
      combination is passed, the algorithm terminates.

      -  If :math:`qbits=160` ``pbits`` must be 1024.
      -  If :math:`qbits=224` ``pbits`` must be 2048.
      -  If :math:`qbits=256` ``pbits`` must be 2048 or 3072.

   4. Choose hash function ``H()`` as SHA-\ ``qbits``.
   5. Compute prime candidate ``q`` as ``H(seed)`` and set the highest and
      lowest bit.
   6. Perform a primality test of ``q`` with the function ``is_prime()`` for
      random numbers and probability set to 128 (i.e. the chance of false positives is bounded by :math:`\frac{1}{2^{128}}`).
      If ``q`` fails the test,
      repeat from Step 2.
   7. Compute :math:`V_k = H(seed+1+k)` for all :math:`k` between 0 and
      :math:`n = \lfloor (pbits-1) / len(H) \rfloor` and construct ``X`` as
      :math:`V_n \| V_{n-1} \| \ldots \| V_0`.

      1. Set the highest bit of ``X``.
      2. Compute ``p`` as  :math:`X-(X \bmod (2*q)-1)`.
      3. Check if ``p`` has the desired bit length ``pbits``. Perform a primality
         test of ``p`` with the function ``is_prime()`` for random numbers and
         probability set to 128. If the check fails, increase :math:`seed` by :math:`n+1` and repeat Step 7.
         After :math:`4*pbits-1` failures, return to Step 2.

   8.  Compute generator ``g`` of the subgroup with order ``q`` using the function ``make_dsa_generator()``.
       After receiving ``p`` and the subgroup order ``q``, ``g`` is computed as follows:

       1. Verify that :math:`p-1>q` holds. If not, the algorithm terminates with
          respective error.
       2. Verify that ``q`` is a factor of :math:`p-1`. If not, algorithm terminates with
          respective error.
       3. Iterate over the first 6541 precomputed primes :math:`q_i` (without 2) and
          computes ``g`` as :math:`q_i^{\frac{p-1}{q}} \bmod p`.
          If ``g`` is 1, choose the next prime :math:`q_i` and
          repeat the process. Once all available primes :math:`q_i` have been used and
          no suitable generator is found, the function terminates with an
          error.

**Remark:** If the DL_Group is generated with ``type=Strong`` the check in Step 4 is necessary to prevent small subgroup attacks effectively.

**Remark:** The guideline [TR-02102-1]_ recommends that ``p`` should have a
bit-length of at least 3000 bits. It is therefore advisable to choose ``pbits``
accordingly. If the DL_Group is generated with ``type=Prime_Subgroup``, this
means the only valid bit lengths of ``p`` and ``q`` are 3072 and 256 respectively.

**Remark:** At the time of this writing [FIPS-186-4]_ from 2013 is still the
latest revision. However [FIPS-186-5-draft]_ from 2019 is available which no
longer recommends DSA as a signature algorithm. Hence, the usage of
``type=DSA_Kosherizer`` for the generation of ``DL_Group`` objects might be
unfavorable.

**Conclusion:** Botan does still allow the generation of 1024 bit DH
parameters. This lower bound should be increased to 3072 bit-length
for conformance with [TR-02102-1]_ starting from 2023.

Key Generation
--------------

The implementation of the Diffie-Hellmann key exchange in
:srcref:`src/lib/pubkey/dh/dh.cpp` provides the DH public key class
``DH_PublicKey`` and the DH private key class ``DH_PrivateKey``. The public
key consists of the DH parameters and a public value ``y``. In addition to
the public values, the DH private key includes the private parameter
``x``. The algorithm requires both participating parties to generate a DH
private key with the same input discrete logarithm group. A private and
an associated public key is generated by calling the constructor
``DH_PrivateKey(RandomNumberGenerator& rng,const DL_Group& grp,const
BigInt& x_arg = 0)``, where ``x_arg`` of 0 has to be passed to generate a
new private parameter. Otherwise ``x_arg`` is set as the secret value of
the ``DH_PrivateKey``. The key generation algorithm operates as follows:

.. admonition:: ``DH_PrivateKey()``

   **Input:**

   -  ``rng``: random number generator
   -  ``grp``: ``DL_Group`` (**Z**/*p*\ **Z**)* defined by ``p``, generator ``g`` with order ``q``
   -  ``x_arg``: private DH parameter

   **Output:**

   -  DH_PrivateKey: ``x``, ``y``, DL_Group (**Z**/*p*\ **Z**)\* defined by ``p``,
      generator ``g`` with order ``q``

   **Steps:**

   1. If ``x_arg`` was provided, set ``x`` to ``x_arg``. Otherwise:

      -  Determine needed exponent length by calling ``grp.exponent_bits()``.
      -  Sample random number of determined exponent length from random
         number generator ``rng`` as secret DH value ``x``.

   2. Compute ``y`` as :math:`g^x \bmod p` with ``g`` and ``p`` taken from the input group ``grp``.

      Optionally the generated parameters and the DL_Group parameters can
      be verified with a call to ``check_key(RandomNumberGenerator& rng,
      bool strong)``. The generated values and the used discrete logarithm
      group ``fail`` the check if one of the following conditions is met.

      -  :math:`y < 2`
      -  :math:`y \geq p`
      -  :math:`x < 2`
      -  :math:`x \geq p`
      -  :math:`g < 2`
      -  :math:`p < 3`
      -  :math:`q < 0`
      -  :math:`{q \neq {{0 \land p} - 1}}\bmod {q \neq 0}`
      -  :math:`{q \neq {0 \land g^{q}}}\bmod {p \neq 1}`
      -  Miller-Rabin primality test for ``p`` or ``q`` fails with 6 (65 if
         ``strong`` is true) test iterations. The test is performed with the
         function ``is_prime()`` for non random numbers.
      -  Lucas primality test of ``p`` or ``q`` fails.
      -  :math:`{y \neq g^{x}}\bmod p`

**Conclusion:** The secret DH parameter is sampled as described in
[TR-02102-1]_.

To avoid potentially malicious system parameters from computational
peers, the ``check_key`` function should be manually called before the key
from the peer has been accepted.

Key Exchange
------------

In the following section we describe the implementation of the
Diffie-Hellman key exchange over cyclic groups (**Z**/*p*\ **Z**)*. The
respective classes and functions can be found in
:srcref:`src/lib/pubkey/dh/dh.cpp`.

Botan computes the shared Diffie-Hellman secret with the following
algorithm, implemented in ``raw_agree(const byte w[], size_t w_len)``
which is part of the respective DH operation class ``DH_KA_Operation``.
The function receives the other parties public value :math:`y_b` and computes the
shared secret as follows:

.. admonition:: ``DH_KA_Operation::raw_agree()``

   **Input:**

   -  :math:`y_b`: DH public value of the other party
   -  DH_PrivateKey: ``x``, ``y``, DL_Group (**Z**/*p*\ **Z**)\* : ``p``,
      generator ``g`` with order ``q``

   **Output:**

   -  ``s``: shared DH secret

   **Steps:**

   1. Sample a blinding nonce :math:`m_e` and compute its inverse :math:`m_d`.
      :math:`m_e` has a length of :math:`length(p)-1`.
   2. Verify that :math:`y_b` is valid. That is the case if :math:`1<y_b<p-1` applies. The algorithm
      terminates with an exception, if :math:`y_b` is invalid.
   3. Blind :math:`y_b` as :math:`y_b' = y_b * m_e \bmod p`.
   4. Compute the blinded shared secret ``s'`` as :math:`s' = y_b'^x \bmod p`.
   5. Unblind the shared secret :math:`s=s' * m_d * \bmod p`

Optionally a specified KDF is applied to the shared secret.

**Conclusion:** The algorithm fulfills all DH criteria listed in
[TR-02102-1]_.
