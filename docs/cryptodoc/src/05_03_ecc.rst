.. _pubkey/ecc:

Elliptic Curve Cryptography
===========================

Parameter Generation
--------------------

In order to compute a shared secret with ECDH, it is required that both
participating parties agree on a domain, which consists of an elliptic
curve, a base point of the curve, the order of the base point and the cofactor.
[#ecc_domain_parameters]_
Theoretically, it is possible to generate a new elliptic curve suitable for
ECDH. As this process is very costly and comes with many pitfalls, only
precomputed standardized curves are used in Botan. Thus the feature of
elliptic curve parameter generation is not implemented. 27 standardized
curves are provided in :srcref:`src/lib/pubkey/ec_group/ec_named.cpp`. All curves
recommended in [TR-02102-1]_ are included.

It is possible to import custom elliptic curves at run time. However, it is the
application developer's responsibility to ensure that such custom curves are
trustworthy and cryptographically strong. Botan *does not* contain means to
ensure that automatically.

Nevertheless, custom elliptic curve domains can and should be validated with
the provided ``EC_Group::verify_group()`` function. It provides basic sanity
checks but does not check the curve's cryptographic strength.
The verification function operates as follows.

.. [#ecc_domain_parameters]
   Elliptic curve domain parameters, their typical symbols and their inter-
   dependence:

   - :math:`p`: prime size of the underlying field :math:`\mathbb{F}_p`
   - :math:`a, b \in \mathbb{F}_p`: curve coefficients in short Weierstrass form:
     :math:`E_{a,b}: y^2 = x^3 + a*x + b`
   - :math:`G_{x,y}` on :math:`E_{a,b}(\mathbb{F}_p)`: the base point of the curve :math:`E_{a,b}`
   - :math:`n = ord(G_{x,y})`: the order of the base point :math:`G_{x,y}`
   - :math:`h = \#E_{a,b}(\mathbb{F}_p)/n`: the cofactor of the curve

.. admonition:: ``EC_Group::verify_group()``

   **Input:**

   -  ``EC_Group (curve parameters (first coefficient a, second coefficient
      b, prime p), base point G, ord(G) n, cofactor of the curve h)``
   -  ``rng``: random number generator
   -  ``source``: builtin or external source
   -  ``strong``: strong verification (default false)

   **Ouput:**

   -  ``true`` if group ``EC_Group`` is valid. ``false`` otherwise

   **Steps:**

   1. If ``source`` is builtin and ``strong`` is false, return true.
   2. Preliminary parameter requirement checks are conducted. ``a`` must be
      non-negative, ``b`` and ``n`` must be positive, and ``p`` must be larger than 3.
      Both ``a`` and ``b`` must be smaller than ``p``.
   3. Perform a primality test of ``p`` with the function ``is_prime()``
      with the passed random number generator ``rng`` and probability
      [#ecc_prime_prob_details]_ set to 128, assuming that ``p`` was randomly generated
      for builtin groups. [#ecc_prime_check_details]_
      If the test fails return false.
   4. Perform a primality test of ``n`` with the function ``is_prime()``
      with the passed random number generator rng and probability set to 128
      assuming that ``n`` was randomly generated for builtin groups.
      If the test fails return false.
   5. Compute :math:`D=(4*a^3 + 27*b^2) \bmod p`. If :math:`D=0` the curve is
      singular and thus invalid. In this case false is returned.
   6. Check that the cofactor ``h`` is at least 1. If not return false.
   7. Verify that ``G`` is on the curve. If not return false.
   8. Assure that ``G`` has the correct order ``n``. This is the case if
      :math:`h*G \neq P_{\infty}` and :math:`n*G = P_{\infty}`.
      If one of the equations does not hold, return false.

.. [#ecc_prime_prob_details]
   Chance of the number being composite is at most :math:`\sfrac{1}{2^{128}}`

.. [#ecc_prime_check_details]
   See :ref:`prim` for further details of the primality checks

The ``verify_group()`` function follows the main recommendations from
[ReqEC]_. Note however that this function performs basic sanity checks on the
construction of the curve only. In particular it cannot ensure that the passed
parameters are cryptographically strong and/or are not maliciously chosen to
contain a backdoor.

Botan implements the elliptic curve standard [ISO-15946-1]_ for ellipic curves
over :math:`\mathbb{F}_p`. The standard additionally defines curves over
:math:`\mathbb{F}_{2^m}` and :math:`\mathbb{F}_{3^m}` that are not implemented.

*Internally* the representation differs between NIST reduction and Montgomery
reduction curves and implements the reduction algorithms and curve
operations in the respective classes ``CurveGFp_NIST`` and
``CurveGFp_Montgomery``. These representations are an implementation detail that
is not made available or configurable by the application developer.
For efficiency purposes Botan uses Jacobian projective
coordinates for all elliptic curve points and point operations as
described in [ISO-15946-1]_ with the line at infinity defined as ``[0,Y,0]``.
The affine coordinates can be obtained by using the conversion
functions ``EC_Point::get_affine_x()`` and ``EC_Point::get_affine_y()``.

The function ``EC_Point::get_affine_x()`` operates as follows.

.. admonition:: ``EC_Point::get_affine_x()``

   **Input:**

   -  ``CurveGFp_Montgomery`` or ``CurveGFp_NIST``: elliptic curve
   -  ``[X,Y,Z]``: point in Jacobian projective coordinates

   **Ouput:**

   -  ``x``: affine ``x``-coordinate of the input point ``[X,Y,Z]``

   **Steps:**

   1. Verify that the input point is not on the line at infinity with the
      coordinates ``[0,Y,0]``. As the point at infinity has no representative
      in affine coordinates, terminate with respective error if a
      representative of the point at infinity is passed.
   2. If ``Z = 1``, the affine coordinate can be taken simply from the Jacobian
      coordinates. Return ``X``.
   3. Otherwise compute affine ``x`` coordinate as
      :math:`\frac{X}{Z^{2}}`.

The conversion function ``EC_Point::get_affine_y()`` performs the following steps.

.. admonition:: ``EC_Point::get_affine_y()``

   **Input:**

   -  ``CurveGFp_Montgomery`` or ``CurveGFp_NIST``: elliptic curve
   -  ``[X,Y,Z]``: point in Jacobian projective coordinates

   **Ouput:**

   -  ``y``: affine ``y``-coordinate of the input point ``[X,Y,Z]``

   **Steps:**

   1. Verify that the input point is not on the line at infinity with the
      coordinates ``[0,Y,0]``. As the point at infinity has no representative
      in affine coordinates, terminate with respective error if a
      representative of the point at infinity is passed.
   2. If ``Z = 1``, the affine coordinate can be taken simply from the Jacobian
      coordinates. Return ``Y``.
   3. Otherwise, compute affine ``y`` coordinate as
      :math:`\frac{Y}{Z^{3}}`.

**Conclusion:** Botan defines all the elliptic curve parameters
recommended in [TR-02102-1]_.
Note however that application developers need to take special care when using
custom curves. Botan's ``verify_group()`` implementation cannot guarantee that
the parameters of such curves are cryptographically strong.

Key Generation
--------------

Botan provides the elliptic curve private key class ``EC_PrivateKey``, the
respective public key class ``EC_PublicKey``, and the key generation
algorithm in :srcref:`src/lib/pubkey/ecc_key/ecc_key.cpp`. To generate a private
key the constructor ``EC_PrivateKey(RandomNumberGenerator& rng, const
EC_Group& ec_group, const BigInt& x, bool with_modular_inverse)`` is
called. The constructor operates as follows:

.. admonition:: ``EC_PrivateKey()``

   **Input:**

   -  ``rng``: random number generator
   -  ``ec_group``: domain(curve parameters(first coefficient a, second
      coefficient b, prime p), base point G, ord(G) n, cofactor of the
      curve h)

   **Output:**

   -  EC_Privatekey: ``d``, ``Q``, domain(curve parameters(first coefficient a,
      second coefficient b, prime p), base point G, ord(G) n, cofactor of
      the curve h)

   **Steps:**

   1. Sample private value ``d`` as a random number :math:`1 \leq d < n` using the algorithm
      described in Section :ref:`pubkey_param/rng`, where :math:`n` is the order of the
      base point G on the curve taken from the domain parameters. It is
      also possible to pass ``d`` as ``x`` to the constructor. In this case ``d``
      is not sampled.
   2. Compute public point ``Q`` as point multiplication :math:`d*G`, where ``G`` is the
      base point defined in the domain. Note that if the passed parameter
      ``with_modular_inverse`` is set to ``true``, the public point ``Q`` is
      instead computed as :math:`d^{-1}*G`. This is required for ECKDSA and ECGDSA key
      generation, but results in an invalid ECDH/ECDSA key.
   3. Verify that the computed public point ``Q`` is on the curve (function
      ``on_the_curve()``). As a consequence, the key generation algorithm
      resists fault attacks and computational errors.

Optionally ``EC_PublicKeys`` can be extensively checked with a call to
``check_key``. The extensive check performs the following steps. Note that
``on_the_curve()`` is always automatically checked.

.. admonition:: ``EC_PublicKeys::check_key()``

   1. Verify the ``ec_group`` by calling ``EC_Group::verify_group``. If the
      domain does not pass the verification, return false.
   2. Assure that the public point ``Q`` is not the point at infinity.
   3. Check that the public point ``Q`` is on the curve (function
      ``on_the_curve()``). If the point does not satisfy the curve equation,
      return false.
   4. If :math:`h>1` applies perform the following additional steps. Else return true.

      1. Verify that the public point has the correct order ``n``. This is
         the case if :math:`h*Q \neq_\infty P` and apply :math:`n*Q =_\infty P`.
         If one of the equations does not apply,
         return false.
      2. Return true.

**Conclusion:** The algorithm fulfills all requirements of [TR-03111]_.
The public key validation follows the requirements described in [ReqEC]_.

.. _pubkey/ecdh:

ECDH
----

The elliptic curve variant of the Diffie-Hellman key exchange is
implemented in :srcref:`src/lib/pubkey/ecdh/ecdh.cpp`.

Key Agreement
^^^^^^^^^^^^^

The shared secret is computed by calling ``raw_agree(const byte w[],
size_t w_len)`` from the respective ECDH operation class
``ECDH_KA_Operation``. The algorithm receives the public point of the
other party and computes the shared secret as follows:

.. admonition:: ``ECDH_KA_Operation::raw_agree()``

   **Input:**

   -  ``rng``: random number generator
   -  :math:`Q_b`: ECDH public point of the other party
   -  EC_Privatekey: ``d``, ``Q``, domain (curve parameters (first coefficient
      ``a``, second coefficient ``b``, prime ``p``), base point ``G``, ``ord(G) n``,
      cofactor of the curve ``h``)

   **Output:**

   -  ``S``: shared ECDH secret point

   **Steps:**

   1. Compute intermediate value :math:`i=(h^{-1} \bmod n)*d`, where ``h`` is the cofactor taken from the
      agreed domain.
   2. Verify that the received public point :math:`Q_b` is on the elliptic curve. This
      check is part of the decode function ``OS2ECP()``.
   3. Sample a :math:`\lceil \frac{length(n)}{2} \rceil` bit long random blinding ``mask`` from ``rng`` and compute
      :math:`i' = i+n*mask`.
   4. Compute the shared secret point ``S`` as :math:`S = (h*Q_b)*i' = (h*Q_b)*(h^{-1} \bmod n )*d = Q_b*d`.
      This computation utilizes
      randomized Jacobian point coordinates with a blinding masks that is
      equal in size to the underlying field.
   5. Verify that the computed shared secret point ``S`` is on the selected
      elliptic curve (``on_the_curve()``).
   6. Return affine x coordinate of shared point ``S`` as shared secret.
      Before the transformation to affine coordinates is carried out, it is
      checked, if the shared point S is the point at infinity
      (``is_zero()``). If that is the case, a respective error is thrown.

Optionally a specified KDF is applied to the shared secret.

**Conclusion:** The implemented ECDH key agreement algorithm complies
with the algorithm shown in chapter 4.3.1 of [TR-03111]_ and thus fulfills
the ECDH criteria listed in [TR-02102-1]_, if a recommended curve was
chosen. Furthermore, it is recommended to utilize the optional KDF to
derive a symmetric key.


ECDSA
-----

The Digital Signature Algorithm over elliptic curves is implemented in
:srcref:`src/lib/pubkey/ecdsa/ecdsa.cpp`.
The implementation follows [X9.62]_ or [RFC6979]_ if the corresponding module is enabled.

Signature Schemes
^^^^^^^^^^^^^^^^^

Similarly to DSA, ECDSA uses the DL/ECSSA (EMSA1) [IEEE-1363-2000]_ signature scheme to
compute a representative of the message to be signed.

Signature Creation
^^^^^^^^^^^^^^^^^^

The signature generation algorithm works as follows:

.. admonition:: ``ECDSA_Signature_Operation::raw_sign()``

   **Input:**

   -  ``rng``: random number generator
   -  ``m``: raw bytes to sign (EMSA1 encoded data)
   -  EC_Privatekey: ``d``, ``Q``, domain (curve parameters (first coefficient
      ``a``, second coefficient ``b``, prime ``p``), base point ``G``, ``ord(G) n``,
      cofactor of the curve ``h``)

   **Output:**

   -  (``r``, ``s``): ECDSA signature

   **Steps:**

   1. Generate parameter ``k`` as a random number :math:`0<k< \lvert E \rvert` using the algorithm
      described in Section :ref:`pubkey_param/rng` or as HMAC_DRBG output
      [RFC6979]_. If Botan is compiled with the module RFC6979 the HMAC_DRBG
      is used, otherwise ``k`` is sampled from the passed random number
      generator ``rng``. HMAC_DRBG is deterministic and k thus depends on the
      HMAC_DRBG inputs ``m``, ``n`` and ``d``.
   2. Sample a :math:`\lceil \frac{lenth(n)}{2} \rceil` bit long random blinding
      ``mask`` from ``rng`` and compute :math:`k'=k+n*mask`.
      Compute the point multiplication :math:`k_p=(x_1,y_1)=k'*G`, where G is the base point of the
      domain. This computation utilizes randomized Jacobian point
      coordinates with a blinding masks that is equal in size to the
      underlying field. Compute :math:`r=x_1 \bmod n` and :math:`s=k^{-1}*(r*d+m)\bmod n`.
      Computation of :math:`r*d+m` is blinded by
      computing it as :math:`(r*d*b+m*b)/b`. If :math:`s=0 \lor r=0` applies,
      the algorithm terminates with an error.

**Remark:** If Botan is built with the RFC6979 module, it implements
deterministic ECDSA signatures, which are not covered by [TR-03111]_. In
this case the implemented ECDSA signature algorithm is not [FIPS-186-4]_
conform. However, the RFC6979 module is prohibited in the BSI module
policy.

Signature Verification
^^^^^^^^^^^^^^^^^^^^^^

The signature verification algorithm works as follows:

.. admonition:: ``ECDSA_Verification_Operation::verify()``

   **Input:**

   -  ``m``: message bytes
   -  EC_Publickey: ``Q``, domain (curve parameters (first coefficient ``a``,
      second coefficient ``b``, prime ``p``), base point ``G``, ``ord(G) n``,
      cofactor of the curve ``h``)
   -  (``r``, ``s``): ECDSA signature

   **Output:**

   -  ``true``, if the signature for message ``m`` is valid. ``false`` otherwise.

   **Steps:**

   1. Verify the passed signature has length :math:`2*qbits`. If that is not the case
      ``false`` is returned.
   2. Assure that :math:`0<r<n \land 0<s<n`. Otherwise the signature is invalid.
   3. Compute :math:`w=s^{-1}\bmod n`
   4. Compute :math:`v_1=m*w \bmod n` and :math:`v_2=r*w \bmod n`
   5. Compute the point :math:`v=(x_1, y_1)=v_1*G+v_2*Q` with Shamir's trick [DI08]_.
   6. Return ``true`` if :math:`x_1 \equiv r \bmod n` applies. ``false`` otherwise.


ECKCDSA
-------

The Korean Certificate-based Digital Signature Algorithm over elliptic
curves is implemented in :srcref:`src/lib/pubkey/eckcdsa/eckcdsa.cpp`. The
implementation follows [ISO-14888-3]_.

Signature Schemes
^^^^^^^^^^^^^^^^^

Unlike other DSA variants, ECKCDSA does not use the DL/ECSSA (EMSA1) [IEEE-1363-2000]_
signature scheme to compute a representative of the message to be
signed.
Instead, besides the message itself,
it also includes the public key in the representative.

Signature Creation
^^^^^^^^^^^^^^^^^^

The signature generation algorithm works as follows:

.. admonition:: ``ECKCDSA_Signature_Operation::raw_sign()``

   **Input:**

   -  ``m``: raw bytes to sign (the hash-code ``H`` in  [ISO-14888-3]_,
      which is the truncated hash from the public key and message)
   -  EC_Privatekey with inverse: ``d``, ``Q``, domain (curve parameters (first coefficient
      ``a``, second coefficient ``b``, prime ``p``), base point ``G``, ``ord(G) n``,
      cofactor of the curve ``h``)
   -  ``rng``: random number generator

   **Output:**

   -  (r,s): ECKCDSA signature

   **Steps:**

   1. Sample parameter k as a random number
      :math:`0 < k < n`
      from ``rng`` using the algorithm described in Section
      :ref:`pubkey_param/rng`.
   2. Sample a :math:`\lceil \frac{lenth(n)}{2} \rceil` bit long random blinding
      ``mask`` from ``rng`` and compute :math:`k'=k+n*mask`.
   3. Compute point :math:`W=(x_1,y_1)=k'*G`.
   4. Compute the witness
      :math:`{r = h}{(x_{1})}`
      , where :math:`h`
      is the hash function used in the current instance of the signature scheme.
   5. If the output length of the hash function :math:`h` exceeds the size of the group order,
      truncate the *low side* in :math:`r` on a byte level to the size of the group order.
      This means bytes in :math:`r` are discarded starting from the beginning of the byte sequence.
   6. Compute
      :math:`{s = {d \ast {({{k - r}\oplus m})}}}\bmod n`
      . If :math:`s=0` applies, the algorithm terminates with an error.
   7. Return ECKCDSA signature (r,s).

Signature Verification
^^^^^^^^^^^^^^^^^^^^^^

The signature verification algorithm works as follows:

.. admonition:: ``ECKCDSA_Verification_Operation::verify()``

   **Input:**

   -  ``m``: raw bytes to verify (the hash-code ``H`` in  [ISO-14888-3]_,
      which is the truncated hash from the public key and message)
   -  EC_Publickey: ``Q``, domain (curve parameters (first coefficient ``a``,
      second coefficient ``b``, prime ``p``), base point ``G``, ``ord(G) n``,
      cofactor of the curve ``h``)
   -  (``r``, ``s``): ECKCDSA signature

   **Output:**

   -  ``true``, if the signature for message ``m`` is valid. ``false`` otherwise

   **Steps:**

   1. Perform preliminary parameter checks and verifies that :math:`0<s<n` applies.
      Terminates otherwise.
   2. Compute :math:`e=r \oplus m \bmod n`.
   3. Compute point :math:`W=s*Q+e*G` with Shamir's trick.
   4. Recompute the witness :math:`r'=h(x_i)`,
      where :math:`h` is the hash function used in the current instance of the signature scheme.
   5. If the output length of the hash function :math:`h` exceeds the size of the group order,
      truncate the *low side* in :math:`r` on a byte level to the size of the group order.
      This means bytes in :math:`r` are discarded starting from the beginning of the byte sequence.
   6. Return ``true`` if the recomputed witness :math:`r'` is equal to
      the witness :math:`r` inside the signature.
      Otherwise return ``false``.


ECGDSA
------

Signature Schemes
^^^^^^^^^^^^^^^^^

The German Digital Signature Algorithm over elliptic curves is
implemented in :srcref:`src/lib/pubkey/ecgdsa/ecgdsa.cpp`. The implementation
follows [ISO-14888-3]_.

Signature Creation
^^^^^^^^^^^^^^^^^^

The signature generation algorithm works as follows:

.. admonition:: ``ECGDSA_Signature_Operation::raw_sign()``

   **Input:**

   -  ``m``: raw bytes to sign (EMSA1 encoded data)
   -  EC_Privatekey with invers: ``d``, ``Q``, domain (curve parameters (first coefficient
      ``a``, second coefficient ``b``, prime ``p``), base point ``G``, ``ord(G) n``,
      cofactor of the curve ``h``)
   -  ``rng``: random number generator

   **Output:**

   -  (r,s): ECGDSA signature

   **Steps:**

   1. Sample parameter ``k`` as a random number
      :math:`0 < k < n`
      from ``rng`` using the algorithm described in Section
      :ref:`pubkey_param/rng` .
   2. Sample a :math:`\lceil \frac{lenth(n)}{2} \rceil` bit long random blinding
      ``mask`` from ``rng`` and compute :math:`k'=k+n*mask`.
   3. Compute point :math:`W=(x_1,y_1)=k'*G`. This computation utilizes randomized Jacobian point
      coordinates with a blinding masks that is equal in size to the
      underlying field.
   4. Set :math:`{r = x_{1}}\bmod n`
   5. Compute :math:`{s = {d \ast {({{k \ast r} - m})}}}\bmod n`.
   6. If :math:`s = {0 \vee r} = 0`
      applies, the algorithm terminates with an error.
   7. Return ECGDSA signature (r,s).

Signature Verification
^^^^^^^^^^^^^^^^^^^^^^

The signature verification algorithm works as follows:

.. admonition:: ``ECGDSA_Verification_Operation::verify()``

   **Input:**

   -  ``m``: message bytes
   -  EC_Publickey: ``Q``, domain (curve parameters (first coefficient ``a``,
      second coefficient ``b``, prime ``p``), base point ``G``, ``ord(G) n``,
      cofactor of the curve ``h``)
   -  (``r``, ``s``): ECGDSA signature

   **Output:**

   -  ``true``, if the signature for message ``m`` is valid. ``false`` otherwise

   **Steps:**

   1. Perform preliminary parameter checks and verify that
      :math:`0 < r < {n \land 0} < s < n`
      applies.
   2. Compute :math:`r^{- 1}\bmod n`
   3. Compute :math:`{v_{1} = {r^{- 1} \ast m}}\bmod n`
      and :math:`{v_{2} = {r^{- 1} \ast s}}\bmod n`.
   4. Compute point
      :math:`W = {{v_{1} \ast G} + {v_{2} \ast Q}}`
   5. Return ``true`` if :math:`r \equiv x_1 \bmod q` applies. Otherwise it returns ``false``.

