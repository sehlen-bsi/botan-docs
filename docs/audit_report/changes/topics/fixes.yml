title: Fixes

description: |
  Most notably, this release fixes a side channel vulnerability in the Kyber
  implementation (known as `KyberSlash <https://kyberslash.cr.yp.to/>`_). See
  Section :ref:`secinfo/kyberslash` for further details.

  This release contains improvements for the Boost ASIO TLS stream shipped with
  the library. After we `introduced automated tests using TLS Anvil
  <https://github.com/randombit/botan/pull/3651>`_ in the previous audit cycle;
  we now run it against a TLS HTTP server using said ASIO stream. This brought
  several high-level TLS state management issues to light. Note however, that
  none of the detected issues was critical for the actual security of the
  implementation.

patches:
# Fix build on NetBSD.  (@0-wiz-0)
- pr: 3767  # https://github.com/randombit/botan/pull/3767
  merge_commit: 3a0201668e8df8066e509696c40d8aaba83fa371
  classification: info
  auditer: reneme

# FIX: TLS 1.3 server hit assertion if application did not provide a cert chain  (@reneme)
- pr: 3754  # https://github.com/randombit/botan/pull/3754
  merge_commit: 2c5f009ede382d091a56979c5482d989723205d8
  classification: relevant
  comment: |
    Assertions should never be hit in production environments. Especially as a
    side effect of a remote message in TLS. Nevertheless, the impact on a
    typical application is small: it might experience failed TLS handshakes where
    the peer receives an "Internal Error".

# Fix: Unintended Kyber Warnings  (@atreiber94)
- pr: 3745  # https://github.com/randombit/botan/pull/3745
  merge_commit: c47aac7e62a6f132b7a3179a086bee184f87cabd
  classification: info

# Fix FFDHE selection in TLS to conform to RFC 7919 (#3743)  (Jack Lloyd)
- commit: e27bf3f2bb85e40645b35650104601ead1ebf3cd  # https://github.com/randombit/botan/commit/e27bf3f2bb85e40645b35650104601ead1ebf3cd
  classification: relevant
  auditer: reneme
  comment: |
    This was broken just before releasing Botan 3.2.0
    (in `GH #3729 <https://github.com/randombit/botan/pull/3729>`_)
    and found by automated tests provided by TLS Anvil.

    Note that this change is mentioned as a bare commit, but it
    was introduced (and reviewed) as `GH #3743 <https://github.com/randombit/botan/pull/3743>`_.

# FIX: asio stream crashes after faulty initialization  (@reneme)
- pr: 3766  # https://github.com/randombit/botan/pull/3766
  merge_commit: a303f4af1504e7ac349dd798190924ea08ead9b7
  classification: info
  comment: |
    The crash happens when an application provides uninitialized dependency
    objects. That indicates a bug in the application and shouldn't be exploitable
    remotely. Now the library handles this situation more gracefully.

# FIX: Alert handling in ASIO stream and HTTP Server  (@reneme)
- pr: 3795  # https://github.com/randombit/botan/pull/3795
  merge_commit: 4fb6ec9cc7e362d9b7bd0696f49d9d21bbf6fd49
  classification: info
  comment: |
    When using the Boost ASIO wrapper for TLS, both the application and the peer
    did not receive a proper error code or TLS alert when Botan detected a
    handshake failure. The TLS connection was reset regardless, therefore the
    bug is not really harming security.
    The problem was detected by the recent introduction of TLS Anvil in the CI.

# FIX: Some minor TLS bugs found along the way  (@reneme)
- pr: 3792  # https://github.com/randombit/botan/pull/3792
  merge_commit: 5ffd732eb00311d9274d62bc452604e32fd5defa
  classification: info

# examples target should require boost  (@securitykernel)
- pr: 3787  # https://github.com/randombit/botan/pull/3787
  merge_commit: caff7e6b8e369df1660952a5d508bd00abbc85f9
  classification: info

# Add check to SM2_PrivateKey::check_key() that private key x is in ]0,q-1[  (@lieser)
- pr: 3804  # https://github.com/randombit/botan/pull/3804
  merge_commit: 40751c65d9051602b23dfa50ca7851986e7bf251
  classification: out of scope

# Fix: ASIO Stream handling of close_notify in handshake  (@FAlbertDev)
- pr: 3801  # https://github.com/randombit/botan/pull/3801
  merge_commit: 420ff86fe78f3c3c1577a43cc8f6dd901eb9fae1
  classification: info
  comment: |
    This is almost a full rewrite of the Boost ASIO stream wrapper for TLS
    to better handle intermediate TLS states and communicate them to the
    downstream application. This is mostly relevant for correct error state
    checking, though.

# FIX: potential non-constant time division in Kyber  (@reneme)
- pr: 3846  # https://github.com/randombit/botan/pull/3846
  merge_commit: 1b6359beb89667c908d0a825b8d2b189355dd7fe
  classification: critical
  comment: |
    This fixes the initial side channel vulnerability "KyberSlash", discovered
    in December 2023. See Section :ref:`secinfo/kyberslash` for further details.

# Fix: Potential side-channel in Kyber's Ciphertext::compress functions  (@FAlbertDev)
- pr: 3874  # https://github.com/randombit/botan/pull/3874
  merge_commit: cada0d75cdc317d53bb95f6e99ac5f54c4202f08
  classification: critical
  comment: |
    This fixes the second side channel vulnerability "KyberSlash", discovered in
    December 2023. See Section :ref:`secinfo/kyberslash` for further details.

# FIX: Access Violation due to stale reference in OCB  (@reneme)
- pr: 3814  # https://github.com/randombit/botan/pull/3814
  merge_commit: 297742687bfa5ac9da4bf412fe9f5d6f13acea57
  classification: out of scope

# FIX: flatten boost buffer sequence for TLS  (@reneme)
- pr: 3839  # https://github.com/randombit/botan/pull/3839
  merge_commit: c59f1bdbd7afc61820751985fe5cf8dd11a0b44d
  classification: info

# Account for a possible cofactor when performing scalar blinding  (@randombit)
- pr: 3803  # https://github.com/randombit/botan/pull/3803
  merge_commit: b77077c6c1d692c8048d8fdf6a483862b6bfa869
  classification: relevant

# Fix typo in PKCS#11 hash function mapping  (@securitykernel)
- pr: 3868  # https://github.com/randombit/botan/pull/3868
  merge_commit: 541a29f6f7e49a7eb2e84730471ef129b1347557
  classification: info
  comment: |
    This issue would have resulted in an inconsistent return value if a user of
    the library queried the utilized hash function of a signature or
    verification operation when performing it on a PKCS#11 module using RSA-PSS
    with SHA-384. The actual operation would have been performed correctly.

# Fix CLI tests under windows and enabled them in the CI  (@lieser)
- pr: 3845  # https://github.com/randombit/botan/pull/3845
  merge_commit: fb4df9a1b05c9c519562916d4fad5c49e78c0d6a
  classification: info

# Add documented botan_cipher_is_authenticated() to FFI  (@reneme)
- pr: 3905  # https://github.com/randombit/botan/pull/3905
  merge_commit: a570dfdba75986f210dc4b25cec44b30f65fef76
  classification: info

# Don't fall back to base cipher mode implementation  (@securitykernel)
- pr: 3881  # https://github.com/randombit/botan/pull/3881
  merge_commit: 754bd0744a24d004507156a6234a4042b75d3f9c
  classification: info

# FIX: Bring pk_ops.h back as public header  (@reneme)
- pr: 3879  # https://github.com/randombit/botan/pull/3879
  merge_commit: 3dc59fcf3e2ba13b90b51c415ec9dc0b751a64c3
  classification: info

# When decoding an arbitrary elliptic curve, set an upper bound on length  (@randombit)
- pr: 3913  # https://github.com/randombit/botan/pull/3913
  merge_commit: 08c404b23740babee1f6aa51b54e966029aadee4
  classification: critical
  comment: |
    This fixes a potential DoS when decoding parameters of custom elliptic
    curves with an oversized parameter ``p``. Botan would check ``p`` for
    primality, potentially consuming excessive CPU time.
    See :ref:`secinfo/oversized_ecc` for further details.

# Use binary GCD  (@reneme)
- pr: 3909  # https://github.com/randombit/botan/pull/3909
  merge_commit: dc3a94e71cb977706df180fcaf913c09a344d1dc
  classification: critical
  comment: |
    Previously, Botan used "safegcd" to compute the GCD of two integers.
    Typically, this algorithm requires constant-time arithmetics on arbitrarily
    sized signed integers. Botan implements these operations for unsigned
    integers only and, therefore, adapted the "safegcd" slightly. This violated
    the termination assumptions of the algorithm, resulting in an error for certain
    inputs. The OSS-Fuzz project found one such input.

    As a permanent fix, Botan now uses the binary GCD algorithm, which does not
    require constant-time arithmetics on signed integers and provides a
    termination assumption that is much easier to reason about.

    See :ref:`secinfo/binary_gcd` for further details.
